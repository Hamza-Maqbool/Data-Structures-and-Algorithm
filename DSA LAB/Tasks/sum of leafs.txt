/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

// void bfs(TreeNode* root){
// queue<TreeNode *> q;
// q.push(root);
// while (q.size()){
//     node *temp = q.front();
//     q.pop();
//     if (temp->left == NULL && temp->left->left == NULL)
//     q.push(temp->left);
//     if (temp->right != NULL && temp->right->left == NULL)
//     q.push(temp->right);
//    }
    
// }

public:
    int sumOfLeftLeaves(TreeNode* root) {
  if(root == NULL)
        return 0;
    
     // if root is not NULL, check if it has a left child which is a leaf node
    if(root->left!=NULL && root->left->left==NULL && root->left->right==NULL)
        return root->left->val + sumOfLeftLeaves(root->right);
    

    // call recursion on left and right subtrees
    return sumOfLeftLeaves(root->left) + sumOfLeftLeaves(root->right);
    }
};